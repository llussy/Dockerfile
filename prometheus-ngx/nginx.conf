#user  nobody;
worker_processes  2;
#error_log  logs/error.log  notice;
#pid        logs/nginx.pid;
events {
    worker_connections  10240;
    use epoll;
}
http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format log_json '{ "@timestamp": "$time_iso8601", '
                         '"remote_addr": "$remote_addr", '
                         '"bytes": "$body_bytes_sent", '
                         '"request_time": "$request_time", '
                         '"status": "$status", '
                         '"http_request": "$scheme://$http_host$request_uri", '
                         '"method": "$request_method", '
                         '"protocol": "$server_protocol", '
                         '"http_range": "$http_range", '
                         '"referer": "$http_referer", '
                         '"user_agent":"$http_user_agent", '
                         '"cookie": "$http_cookie", '
                         '"x_forwarded_for": "$http_x_forwarded_for", '
                         '"upstream_addr": "$upstream_addr", '
                         '"upstream_response_time": "$upstream_response_time", '
                         '"upstream_status": "$upstream_status" }';
    access_log logs/access.log log_json;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout  30;
    proxy_http_version 1.1;
################################
lua_shared_dict prometheus_metrics 10M;
lua_package_path "/usr/local/openresty/nginx/conf/prometheus.lua";
init_by_lua '
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"uri"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';
log_by_lua '
  metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
  metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.uri})
';

    server {
        listen       80;
        server_name  localhost;

    location /metrics {
      content_by_lua '
      prometheus:collect()
    ';
    }
       location /lua {
        default_type text/plain;
        content_by_lua 'ngx.say("hello lua")';
        }
        #############
        location /sleep1 {
        default_type text/plain;
        content_by_lua '       
        ngx.sleep(1)
        ngx.say("sleep1")
        ';            
        }
        location /sleep5 {
        default_type text/plain;
        content_by_lua '       
        ngx.sleep(5)
        ngx.say("sleep5")
        ';            
        }
        location /sleep6 {                    
        default_type text/plain;              
        content_by_lua '                      
        ngx.sleep(6)                          
        ngx.say("sleep6")                     
        ';                                    
        } 
        #############
    }
}
